{{! Use the main layout }}
{{!< main }}

<section class="container">
    {{#if loggedIn}}
    <div class="left-box">
        <section class="post-form">
            <form id="postForm" action="/posts" method="POST" onsubmit="return validateForm()">
                <input type="text" name="title" id="title" placeholder="Title" required>
                <textarea name="postBody" id="postBody" placeholder="What's on your mind?" required></textarea>
                <div class="form-actions">
                    <button type="button" class="emoji-button" onclick="toggleEmojiPanel()">ðŸ˜€</button>
                    <button type="submit" class="post-button">Post</button>
                </div>
            </form>
            <div id="emoji-container" class="emoji-panel" style="display: none;">
                <input type="text" id="emoji-search" placeholder="Search emojis..." oninput="searchEmojis()">
                <div id="emoji-grid" class="emoji-grid"></div>
            </div>
        </section>
    </div>
    {{/if}}

    <section class="posts-list">
        <!-- recent posts -->
        {{#if posts.length}}
        <ul>
            {{#each posts}}
                {{> post this user=../user}}            
            {{/each}}
        </ul>
        {{else}}
            <p>No posts</p>
        {{/if}}
    </section>
</section>

{{! JavaScript for Emoji Integration }}
<script>
let allEmojis = [];  // Global list to hold all emojis

document.addEventListener("DOMContentLoaded", function () {

    // Fetch emojis on page load
    fetchEmojis();
});

function toggleEmojiPanel() {
    const container = document.getElementById('emoji-container');
    container.style.display = container.style.display === 'none' ? 'block' : 'none';
}

async function fetchEmojis() {
    try {
        const response = await fetch('https://emoji-api.com/emojis?access_key=YOUR_API_KEY'); 
        const emojis = await response.json();
        allEmojis = emojis.map(emoji => ({
            character: emoji.character,
            slug: emoji.slug
        }));
        displayEmojis(allEmojis);
    } catch (error) {
        console.error('Error fetching emojis:', error);
    }
}

function displayEmojis(emojis, limit = 200) {
    const container = document.getElementById('emoji-grid');
    container.innerHTML = '';  // Clear previous results
    if (Array.isArray(emojis) && emojis.length > 0) {
        emojis.slice(0, limit).forEach(emoji => {
            const emojiElement = document.createElement('span');
            emojiElement.textContent = emoji.character;
            emojiElement.title = emoji.slug;  // Showing the emoji name on hover
            emojiElement.style.cursor = 'pointer';
            emojiElement.onclick = () => insertEmoji(emoji.character);
            container.appendChild(emojiElement);
        });
    } else {
        container.textContent = 'No emojis found. Try a different search!';
    }
}

function searchEmojis() {
    const searchTerm = document.getElementById('emoji-search').value.toLowerCase();
    const filteredEmojis = allEmojis.filter(emoji => emoji.slug.includes(searchTerm));
    displayEmojis(filteredEmojis);
}

function insertEmoji(emoji) {
    const textarea = document.getElementById('postBody');
    const start = textarea.selectionStart;
    const end = textarea.selectionEnd;
    const text = textarea.value;
    textarea.value = text.substring(0, start) + emoji + text.substring(end);
    textarea.focus();
    textarea.setSelectionRange(start + emoji.length, start + emoji.length);
}

function validateForm() {
    const title = document.getElementById('title').value.trim();
    const postBody = document.getElementById('postBody').value.trim();
    
    if (title === '' || postBody === '') {
        alert('Title and post content cannot be empty.');
        return false;
    }
    return true;
}
</script>
