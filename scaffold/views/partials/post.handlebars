{{! Partial for a single post }}
<div class="post">

    <div class="post-avatar">
        <img src="{{this.avatar_url}}" alt="User Avatar" />
    </div>
    
    <div class="post-content preserve-newlines">
        <!-- Title and Buttons -->
        <div class="post-header">
            <h2>{{this.title}}</h2>
            <div class="post-buttons">
                {{#ifCond user.username this.username}}
                    <button class="btn-delete" data-id="{{this.id}}"><i class="fas fa-trash-alt"></i> Delete</button>
                {{else}}
                    <button class="btn-like" data-id="{{this.id}}"><i class="fas fa-heart"></i> Like</button>
                {{/ifCond}}
            </div>
        </div>
        <!-- Post Content -->
        <p>{{this.content}}</p>
        <!-- Post Footer -->
        <div class="post-footer">
            <span>Posted by {{this.username}} on {{formatDate this.timestamp}}</span>
            <span class="like-count">{{this.likes}} Likes</span>
        </div>
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        document.querySelectorAll(".btn-delete").forEach(button => {
            button.addEventListener("click", handleDeleteClick);
        });

        document.querySelectorAll(".btn-like").forEach(button => {
            button.addEventListener("click", handleLikeClick);
        });
    });

    async function handleDeleteClick(event) {
        const buttonElement = event.target.closest('.btn-delete');
        const postId = buttonElement.getAttribute('data-id');

        try {
            const response = await fetch(`/delete/${postId}`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' }
            });

            const message = await response.text();
            if (response.ok && message === "Post deleted") {
                buttonElement.closest('.post').remove();
            } else {
                alert(message);
            }
        } catch (error) {
            console.error('Error deleting post:', error);
        }
    }

    async function handleLikeClick(event) {
        const buttonElement = event.target.closest('.btn-like');
        const postId = buttonElement.getAttribute('data-id');

        try {
            const response = await fetch(`/like/${postId}`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
            });

            const data = await response.json();
            if (response.ok && data.success) {
                // Update the like count in the DOM
                const likeCountElement = buttonElement.closest('.post').querySelector('.like-count');
                likeCountElement.textContent = `${data.likes} Likes`;

                // Toggle the like/unlike state in the button
                buttonElement.querySelector('i').classList.toggle('liked', data.message === "Post liked");
            } else {
                alert(data.message);
            }
        } catch (error) {
            console.error('Error liking post:', error);
        }
    }

</script>
